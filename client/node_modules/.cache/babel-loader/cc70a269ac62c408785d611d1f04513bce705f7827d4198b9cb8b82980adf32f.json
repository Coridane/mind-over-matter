{"ast":null,"code":"var _jsxFileName = \"/Users/tobyhomedrive/bootcamp/mind-over-matter/client/src/components/payment/checkoutForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StripeAPIComponent = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isPaymentSuccessful, setIsPaymentSuccessful] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      return;\n    }\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    if (error) {\n      setError(error.message);\n    } else {\n      // Send the paymentMethod.id to your server to complete the payment\n      // Replace with your server-side code to handle the payment\n      const paymentMethodId = paymentMethod.id;\n\n      // Example: Send the paymentMethodId to your server\n      // fetch('/your-server-endpoint', {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json',\n      //   },\n      //   body: JSON.stringify({ paymentMethodId }),\n      // })\n      // .then(response => response.json())\n      // .then(data => {\n      //   if (data.success) {\n      //     setIsPaymentSuccessful(true);\n      //   } else {\n      //     setError(data.error);\n      //   }\n      // })\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Card details:\", /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !stripe,\n        children: \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this), isPaymentSuccessful && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success\",\n      children: \"Payment was successful!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(StripeAPIComponent, \"jMifsO9eFZFO4GS9ruyO/iPmY0A=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = StripeAPIComponent;\nexport default StripeAPIComponent;\nvar _c;\n$RefreshReg$(_c, \"StripeAPIComponent\");","map":{"version":3,"names":["React","useState","useStripe","useElements","CardElement","jsxDEV","_jsxDEV","StripeAPIComponent","_s","stripe","elements","isPaymentSuccessful","setIsPaymentSuccessful","error","setError","handleSubmit","event","preventDefault","paymentMethod","createPaymentMethod","type","card","getElement","message","paymentMethodId","id","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","disabled","className","_c","$RefreshReg$"],"sources":["/Users/tobyhomedrive/bootcamp/mind-over-matter/client/src/components/payment/checkoutForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\n\nconst StripeAPIComponent = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isPaymentSuccessful, setIsPaymentSuccessful] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      return;\n    }\n\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n    });\n\n    if (error) {\n      setError(error.message);\n    } else {\n      // Send the paymentMethod.id to your server to complete the payment\n      // Replace with your server-side code to handle the payment\n      const paymentMethodId = paymentMethod.id;\n\n      // Example: Send the paymentMethodId to your server\n      // fetch('/your-server-endpoint', {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json',\n      //   },\n      //   body: JSON.stringify({ paymentMethodId }),\n      // })\n      // .then(response => response.json())\n      // .then(data => {\n      //   if (data.success) {\n      //     setIsPaymentSuccessful(true);\n      //   } else {\n      //     setError(data.error);\n      //   }\n      // })\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Card details:\n          <CardElement />\n        </label>\n        <button type=\"submit\" disabled={!stripe}>\n          Pay\n        </button>\n      </form>\n      {error && <div className=\"error\">{error}</div>}\n      {isPaymentSuccessful && <div className=\"success\">Payment was successful!</div>}\n    </div>\n  );\n};\n\nexport default StripeAPIComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,WAAW,EAAEC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,MAAM,GAAGP,SAAS,CAAC,CAAC;EAC1B,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMc,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,IAAI,CAACR,MAAM,IAAI,CAACC,QAAQ,EAAE;MACxB;MACA;IACF;IAEA,MAAM;MAAEG,KAAK;MAAEK;IAAc,CAAC,GAAG,MAAMT,MAAM,CAACU,mBAAmB,CAAC;MAChEC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAEX,QAAQ,CAACY,UAAU,CAAClB,WAAW;IACvC,CAAC,CAAC;IAEF,IAAIS,KAAK,EAAE;MACTC,QAAQ,CAACD,KAAK,CAACU,OAAO,CAAC;IACzB,CAAC,MAAM;MACL;MACA;MACA,MAAMC,eAAe,GAAGN,aAAa,CAACO,EAAE;;MAExC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF;EACF,CAAC;;EAED,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAMqB,QAAQ,EAAEZ,YAAa;MAAAW,QAAA,gBAC3BpB,OAAA;QAAAoB,QAAA,GAAO,eAEL,eAAApB,OAAA,CAACF,WAAW;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eACRzB,OAAA;QAAQc,IAAI,EAAC,QAAQ;QAACY,QAAQ,EAAE,CAACvB,MAAO;QAAAiB,QAAA,EAAC;MAEzC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EACNlB,KAAK,iBAAIP,OAAA;MAAK2B,SAAS,EAAC,OAAO;MAAAP,QAAA,EAAEb;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC7CpB,mBAAmB,iBAAIL,OAAA;MAAK2B,SAAS,EAAC,SAAS;MAAAP,QAAA,EAAC;IAAuB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEV,CAAC;AAACvB,EAAA,CA5DID,kBAAkB;EAAA,QACPL,SAAS,EACPC,WAAW;AAAA;AAAA+B,EAAA,GAFxB3B,kBAAkB;AA8DxB,eAAeA,kBAAkB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}